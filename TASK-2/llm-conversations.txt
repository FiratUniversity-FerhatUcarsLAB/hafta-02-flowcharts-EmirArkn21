“E-ticaret sitesinde sepet y¨onetimi ve ¨odeme sistemini adım adım a¸cıkla. Kullanıcı giri¸si, ¨ur¨un ekleme, stok kontrol¨u, indirim kodu, kargo hesaplama ve ¨odeme a¸samalarını i¸cermeli.”

Harika — aşağıda e-ticaret sitesinde sepet yönetimi ve ödeme akışını adım adım ve açık şekilde anlattım. Her adımın altında gerekli kontroller ve önemli kenar durumları da kısa olarak belirtilmiştir.

Kullanıcı girişi (kimlik doğrulama)

Kullanıcı e-posta/telefon + şifre veya OAuth (Google/Facebook) ile giriş yapar.

Giriş başarısızsa hata göster, başarılıysa oturum başlat ve kullanıcıya ait mevcut sepeti (varsa) yükle.

Güvenlik: şifre hash’leme, oturum süresi, çok faktörlü kimlik doğrulama opsiyonu.

Ürün listeleme ve ürün ekleme (Cart add)

Kullanıcı “Sepete Ekle” butonuna basar; sistem ürünü, istenen miktarı ve seçili varyant(renk/beden) bilgilerini alır.

Stok kontrolü yap: (stok ≥ istenen miktar?) → evet ise sepete ürün ekle / geçici rezervasyon yap; hayır ise kullanıcıyı bilgilendir.

Eğer kullanıcı oturum açmadıysa geçici (session-based) sepet tut; login sonrası birleştirme (merge) mantığı uygula.

Sepet görüntüleme / güncelleme / silme

Sepet sayfasında ürünler, adet, birim fiyat, ara toplam, tahmini kargo, vergiler gösterilir.

Kullanıcı adet değiştirirse stok tekrar kontrolü yapılır; silme ile öğe kaldırılır.

Ara toplam her değişiklikte yeniden hesaplanır; performans için hesaplamaları sunucu veya cache katmanında doğrula.

İndirim kodu / promosyon uygulama

Kullanıcı kupon kodu girer → kodun geçerliliği, son kullanım tarihi, kullanım hakkı, minimum sipariş koşulları ve hedef ürün/kategori kontrol edilir.

Geçerli ise indirimi uygula (yüzde/nominal/ücretsiz kargo vb.), tutarları yeniden hesapla ve indirim detayını göster.

Aynı kuponun birden fazla kullanımına, istismar ve concurrency’e karşı kontroller uygula (ör. atomik kullanım sayacı).

Kargo hesaplama (adres & seçenekler)

Kullanıcı teslimat adresini girer veya seçer; gönderim bölgesine göre kargo seçenekleri (standard, hızlı, same-day) çağrılır.

Kargo fiyatı: ağırlık/hacim, gönderim bölgesi, satıcı politikaları ve varsa promosyon/ücretsiz kargo kurallarıyla hesaplanır.

Tahmini teslimat süresi ve kargo sağlayıcı seçenekleri kullanıcıya sunulur; kullanıcı birini seçer ve toplam hesaplanır.

Ödeme aşaması (checkout)

Özet: ürünler, indirim, kargo, vergiler, toplam tutar gösterilir; iptal / geri dönme seçenekleri sun.

Ödeme metodu seçimi: kredi/banka kartı, kapıda ödeme, havale/EFT, dijital cüzdan.

Kart ile ödeme: kart bilgileri PCI-DSS uyumlu şekilde tokenizasyon kullanılarak ödeme ağ geçidine gönderilir; 3-D Secure (OTP) gerekirse yönlendir.

Başarılı ödeme → ödeme sağlayıcıdan onay al, işlem kimliği (transaction id) sakla; başarısız → hata mesajı, yeniden deneme veya alternatif yöntem öner.

Sipariş oluşturma ve stok güncelleme (atomic işlemler)

Ödeme onayı geldikten sonra veritabanında siparişi “oluştur ve onayla” durumuna geçir; stoktan kalıcı düşüş yap (debounce/transaction ile race koşullarını engelle).

Eğer ödeme onayı alınmış ama stok tükenmişse (nadiren oluşabilir) iş kuralları: parti gönderim, müşteri iletişimi veya tam iptal/refund akışı başlat.

Bildirimler, fatura ve takip

Kullanıcıya e-posta/SMS/uygulama bildirimi gönder: sipariş onayı, fatura, kargo takibi bilgisi.

Fatura ve teslimat bilgilerini sakla; kargo sağlayıcıdan takip numarası geldikçe güncelle.

Hata, geri ödeme ve tekrar deneme politikaları

Ödeme başarısızsa idempotent retry (aynı sipariş için çoklu ödeme çağrılarını engelle) ve kullanıcıyı bilgilendir.

İade/refund sürecini tanımla: onay, stok geri yatırma, ödeme sağlayıcıyla uyumlu iadeler.

Loglama, izleme ve alarmlar: hatalar, başarısız ödemeler, yüksek iade oranları için metrik topla.

Performans, güvenlik ve ölçeklenebilirlik notları

Kritik kısımlar (stok kontrol, ödeme onayı) için atomik veritabanı işlemleri veya optimistic/pessimistic locking kullan.

İstemci tarafında hesaplama hızlandırılabilir ama toplam fiyat/indirim/kargo doğrulamalar sunucuda yapılmalı.

PCI-DSS, GDPR uyumluluğu, rate limiting, bot/abuse koruması ve güvenli loglama uygulayın.

Bu akışı gerçek bir uygulamada microservice/monolith tercihine göre parçalara (katalog servisi, sepet servisi, stok servisi, ödeme servisi, kargo servisi) ayırmak ve her servis için API sözleşmesi/protocol (idempotency key, event sourcing veya saga pattern) belirlemek işleri sağlamlaştırır. İstersen bu adımları pseudocode, REST API taslağı veya akış diyagramı (Graphviz DOT) formatına dönüştüreyim. Hangi formatı istersin?



“Bu sistemi pseudocode olarak yaz. Döngüler için DONGÜ, koşullar için ¨ EĞER- İSE kullan. Her adımı BAŞLA ile başlat, BİTİR ile bitir. Tüm kontrol noktalarını belirt.”



Harika — aşağıda e-ticaret sepet yönetimi ve ödeme sistemi için istenen formatta, adım adım ve detaylı pseudocode var. Kullanılan yapılar: BAŞLA / BİTİR, OKU, YAZ, EĞER-İSE, DÖNGÜ. Tüm kontrol noktaları (giriş, stok, kupon, kargo, ödeme, hata/yeniden deneme, stok güncelleme, iade vs.) açıkça belirtildi.

BAŞLA

    // --- DEĞİŞKENLER ---
    tanımla kullanici, oturumAcik, sepet, urunID, miktar, stok, fiyat, araToplam
    tanımla kuponKodu, kuponGecerliMi, kuponIndirim, kargoAdres, kargoSecimi, kargoUcreti
    tanımla vergi, toplamTutar, odemeYontemi, odemeBasarili, odemeId
    tanımla maksimumDeneme ← 3
    sepet ← boşListe
    oturumAcik ← false

    // --- 1. KULLANICI GİRİŞİ ---
    BAŞLA Kullanıcı_Girisi
        YAZ "Kullanıcı girişi yapılacak mı? (E/H)"
        OKU cevap
        EĞER cevap = "E" İSE
            DÖNGÜ maksimumDeneme > 0 İKEN
                YAZ "OKU e-posta veya kullanıcı adı"
                OKU girisEmail
                YAZ "OKU şifre"
                OKU girisSifre

                // --- Kimlik doğrulama kontrolü ---
                EĞER DogrulaKullanici(girisEmail, girisSifre) = true İSE
                    oturumAcik ← true
                    kullanici ← GetirKullanici(girisEmail)
                    YAZ "Giriş başarılı. Sepet yükleniyor..."
                    sepet ← YukleKullaniciSepeti(kullanici.id)
                    ÇIK DÖNGÜDEN
                DEĞİLSE
                    maksimumDeneme ← maksimumDeneme - 1
                    EĞER maksimumDeneme > 0 İSE
                        YAZ "Giriş hatası. Kalan deneme: ", maksimumDeneme
                    DEĞİLSE
                        YAZ "Giriş başarısız. Lütfen daha sonra tekrar deneyin."
                        DUR
                    BİTİR
                BİTİR
            SON
        DEĞİLSE
            YAZ "Misafir kullanıcı devam ediyor. Geçici sepet oluşturuluyor."
            sepet ← BosSepetOluştur()
        BİTİR
    BİTİR Kullanıcı_Girisi

    // --- 2. ÜRÜN EKLEME (SEPETE) ---
    BAŞLA Urun_Ekleme
        DÖNGÜ true İKEN
            YAZ "Ürün eklemek ister misiniz? (E/H)"
            OKU ekleCevap
            EĞER ekleCevap = "H" İSE
                ÇIK DÖNGÜDEN
            BİTİR

            YAZ "OKU urunID"
            OKU urunID
            YAZ "OKU miktar"
            OKU miktar

            // --- Stok kontrol ---
            stok ← GetirUrunStok(urunID)
            EĞER stok ≥ miktar İSE
                // -- Geçici rezervasyon veya hemen sepete ekle --
                EĞER oturumAcik = true İSE
                    // Oturumlu kullanıcı: kalıcı veya geçici rezervasyon politikasına göre
                    rezervasyonBasarili ← RezerveEt(urunID, miktar, kullanici.id)
                    EĞER rezervasyonBasarili = true İSE
                        sepet.Ekle(urunID, miktar)
                        YAZ "Ürün sepete eklendi."
                    DEĞİLSE
                        YAZ "Ürün rezervasyonu yapılamadı. Tekrar deneyin."
                    BİTİR
                DEĞİLSE
                    // Misafir: session tabanlı sepet
                    sepet.Ekle(urunID, miktar)
                    YAZ "Ürün (misafir) sepete eklendi."
                BİTİR
            DEĞİLSE
                YAZ "Stok yetersiz. Mevcut stok: ", stok
            BİTİR

        SON
    BİTİR Urun_Ekleme

    // --- 3. SEPET GÖRÜNTÜLE / GÜNCELLE ---
    BAŞLA Sepet_Islemleri
        YAZ "Sepetiniz:"
        sepetGoruntusu ← GetirSepetDetay(sepet)
        YAZ sepetGoruntusu

        DÖNGÜ true İKEN
            YAZ "Sepeti güncellemek ister misiniz? (adet değiştir/sil/devam) (D/S/V)"
            OKU secim
            EĞER secim = "D" İSE
                YAZ "OKU urunID"
                OKU urunID
                YAZ "OKU yeniAdet"
                OKU yeniAdet
                stok ← GetirUrunStok(urunID)
                EĞER stok ≥ yeniAdet İSE
                    sepet.GuncelleAdet(urunID, yeniAdet)
                    YAZ "Adet güncellendi."
                DEĞİLSE
                    YAZ "Stok yetersiz. Mevcut stok: ", stok
                BİTİR
            DEĞİLSE EĞER secim = "S" İSE
                YAZ "OKU urunID silinecek"
                OKU urunID
                sepet.Sil(urunID)
                YAZ "Ürün sepetten silindi."
            DEĞİLSE
                ÇIK DÖNGÜDEN
            BİTİR
        SON
    BİTİR Sepet_Islemleri

    // --- 4. İNDİRİM KODU / PROMOSYON ---
    BAŞLA Kupon_Uygula
        YAZ "Kupon kodu var mı? (E/H)"
        OKU kuponVar
        EĞER kuponVar = "E" İSE
            YAZ "OKU kuponKodu"
            OKU kuponKodu
            kuponGecerliMi, kuponIndirim ← KontrolEtKupon(kuponKodu, kullanici, sepet)
            EĞER kuponGecerliMi = true İSE
                UygulaKupon(sepet, kuponIndirim)
                YAZ "Kupon uygulandı: indirim = ", kuponIndirim
            DEĞİLSE
                YAZ "Kupon geçersiz veya koşullar sağlanmıyor."
            BİTİR
        DEĞİLSE
            YAZ "Kupon uygulanmadı."
        BİTİR
    BİTİR Kupon_Uygula

    // --- 5. KARGO HESAPLAMA ---
    BAŞLA Kargo_Hesapla
        YAZ "Teslimat adresi girilsin mi? (E/H)"
        OKU adresVar
        EĞER adresVar = "E" İSE
            YAZ "OKU adres bilgileri"
            OKU kargoAdres
        DEĞİLSE
            YAZ "Lütfen önce adres ekleyin."
            DUR
        BİTİR

        // Kargo seçeneklerini getir
        kargoSecenekleri ← HesaplaKargoSecenekleri(sepet, kargoAdres)
        YAZ "Mevcut kargo seçenekleri: ", kargoSecenekleri

        YAZ "Hangi kargo seçilsin? (ID gir)"
        OKU kargoSecimi
        kargoUcreti ← GetirKargoUcreti(kargoSecimi, sepet, kargoAdres)
        YAZ "Seçilen kargo ücreti: ", kargoUcreti
    BİTİR Kargo_Hesapla

    // --- 6. FİYAT, VERGİ VE TOPLAM HESAPLAMA ---
    BAŞLA Fiyat_Hesapla
        araToplam ← HesaplaAraToplam(sepet)   // ürün fiyatları * adet
        vergi ← HesaplaVergi(araToplam, kargoAdres)
        toplamTutar ← araToplam - sepet.indirim + vergi + kargoUcreti
        YAZ "Ara toplam: ", araToplam
        YAZ "İndirim: ", sepet.indirim
        YAZ "Vergi: ", vergi
        YAZ "Kargo: ", kargoUcreti
        YAZ "Toplam: ", toplamTutar
    BİTİR Fiyat_Hesapla

    // --- 7. ÖDEME AŞAMASI ---
    BAŞLA Odeme
        YAZ "Ödeme yöntemi seçiniz: (KrediKartı/ Havale/ Kapıda/ DijitalCuzdan)"
        OKU odemeYontemi

        // --- Ödeme doğrulama ve idempotency ---
        odemeDenemeSayisi ← 0
        DÖNGÜ odemeDenemeSayisi < maksimumDeneme İKEN
            odemeDenemeSayisi ← odemeDenemeSayisi + 1

            EĞER odemeYontemi = "KrediKartı" İSE
                YAZ "OKU kart bilgileri (kartNo, sonKullanma, cvv)"
                OKU kartBilgi
                // Tokenize ve gönder
                token ← TokenizeKart(kartBilgi)
                odemeBasarili, odemeId ← OdemeSaglayici.Ode(token, toplamTutar, idempotencyKey=OlusturKey())
            DEĞİLSE EĞER odemeYontemi = "Havale" İSE
                YAZ "Havale bilgileri verildi. Ödeme yapılana kadar bekle."
                odemeBasarili, odemeId ← HavaleBekleVeOnayla(kullanici, toplamTutar)
            DEĞİLSE EĞER odemeYontemi = "Kapıda" İSE
                // Kapıda ödeme politikasını kontrol et
                EĞER KapidaIzinVar(kargoAdres) = true İSE
                    odemeBasarili ← true
                    odemeId ← "KAPIDA-" + ZamanStamp()
                DEĞİLSE
                    YAZ "Kapıda ödeme bu adrese yapılamaz."
                    odemeBasarili ← false
                BİTİR
            DEĞİLSE
                // Dijital cüzdan vb.
                odemeBasarili, odemeId ← DijitalCuzdan.Ode(kullanici, toplamTutar)
            BİTİR

            EĞER odemeBasarili = true İSE
                YAZ "Ödeme başarılı. İD: ", odemeId
                ÇIK DÖNGÜDEN
            DEĞİLSE
                YAZ "Ödeme başarısız. Kalan deneme: ", maksimumDeneme - odemeDenemeSayisi
                EĞER odemeDenemeSayisi >= maksimumDeneme İSE
                    YAZ "Ödeme işlemi başarısız. Sipariş tamamlanamadı."
                    DUR
                DEĞİLSE
                    YAZ "Farklı bir ödeme yöntemi denemek ister misiniz? (E/H)"
                    OKU farkli
                    EĞER farkli = "E" İSE
                        YAZ "Yeni ödeme yöntemi seçiniz."
                        OKU odemeYontemi
                    DEĞİLSE
                        DUR
                    BİTİR
                BİTİR
            BİTİR
        SON
    BİTİR Odeme

    // --- 8. SIPARIŞ OLUŞTURMA VE STOK GÜNCELLEME (ATOMIC) ---
    BAŞLA Siparis_Olustur
        // Ödeme başarılıysa devam et
        EĞER odemeBasarili = true İSE
            // Başlat transaction
            BaşlatTransaction()
            başarılı ← true

            // Stokları kalıcı olarak düş
            DÖNGÜ her bir ürün in sepet İKEN
                stok ← GetirUrunStok(ürün.id)
                EĞER stok ≥ ürün.miktar İSE
                    azaltildi ← AzaltStok(ürün.id, ürün.miktar)
                    EĞER azaltildi = false İSE
                        başarılı ← false
                        YAZ "Stok güncelleme hatası ürün: ", ürün.id
                        ÇIK DÖNGÜDEN
                    BİTİR
                DEĞİLSE
                    başarılı ← false
                    YAZ "Sipariş iptal: stok yetersiz ürün: ", ürün.id
                    ÇIK DÖNGÜDEN
                BİTİR
            SON

            EĞER başarılı = true İSE
                siparisId ← OlusturSiparis(kullanici, sepet, kargoAdres, odemeId, toplamTutar)
                CommitTransaction()
                YAZ "Sipariş başarıyla oluşturuldu. Sipariş ID: ", siparisId
            DEĞİLSE
                RollbackTransaction()
                // Ödeme alındıysa iade başlat
                EĞER odemeBasarili = true İSE
                    YAZ "Ödeme alındı fakat stok hatası. İade başlatılıyor."
                    BaslatIade(odemeId)
                BİTİR
                DUR
            BİTİR
        DEĞİLSE
            YAZ "Ödeme yapılmadığı için sipariş oluşturulmadı."
            DUR
        BİTİR
    BİTİR Siparis_Olustur

    // --- 9. BİLDİRİMLER VE TAKİP ---
    BAŞLA Bildirimler
        YAZ "E-posta ve SMS ile sipariş onayı gönderiliyor..."
        GonderSiparisOnayi(kullanici.email, siparisId)
        YAZ "Fatura oluşturuluyor ve saklanıyor."
        OlusturVeSaklaFatura(siparisId)
    BİTİR Bildirimler

    // --- 10. İADE / GERI ÖDEME SENARYOSU (Kısaca) ---
    BAŞLA Iade_Islemleri
        YAZ "İade talebi gelirse:"
        YAZ "  - İade onayı kontrol et"
        YAZ "  - Ürün sağlandıysa stok geri yatır"
        YAZ "  - Ödeme sağlayıcı ile iade uyuşması yap ve kullanıcıyı bilgilendir"
        YAZ "  - Log ve metrikleri güncelle"
    BİTİR Iade_Islemleri

    // --- 11. KAYIT, LOG ve İZLEME ---
    BAŞLA Loglama
        Logla("Kullanıcı ID", kullanici.id)
        Logla("Sepet içeriği", sepet)
        Logla("Ödeme ID", odemeId)
        Logla("Sipariş ID", siparisId)
    BİTİR Loglama

BİTİR


Notlar / Kontrol noktaları (özet)

Kimlik doğrulama (giriş denemeleri, oturum yönetimi)

Ürün ekleme sırasında stok kontrol ve rezervasyon

Sepet güncelleme sırasında tekrar stok kontrolü

Kupon doğrulama: geçerlilik, tarih, kullanım hakkı, hedef ürün/kategori

Kargo hesaplama: adres doğrulama, seçenekler, ücret hesaplama

Toplam hesaplama: ara toplam, indirim, vergi, kargo

Ödeme: idempotency, çoklu deneme, farklı yöntemler, 3-deneme politikası

Sipariş oluşturma: atomic transaction ile stok düşme ve rollback/commit

Ödeme alındıktan sonra stok problemi olursa iade süreci

Bildirim, fatura, loglama ve iade prosedürleri



Pseudocode’u Graphviz DOT formatına ¸cevir. rankdir=TB kullan. Karar noktalarında EVET/HAYIR etiketlerini unutma.



digraph E_Ticaret_Sepet_Odeme {
  rankdir=TB;
  labelloc="t";
  label="E-ticaret Sepet Yönetimi ve Ödeme Akışı (Pseudocode -> DOT)";

  node [fontname="Arial", fontsize=10];

  // Shapes: start/end=ellipse, io=parallelogram, proc=box, decision=diamond
  start [label="BAŞLA", shape=ellipse, fillcolor=lightgoldenrod];
  end [label="BİTİR", shape=ellipse, fillcolor=lightgoldenrod];

  // 1. Kullanıcı girişi
  u_init [label="Başlat: Değişkenleri tanımla\n(sepet boş, oturum=false,...)", shape=box];
  ask_login [label="OKU: 'Kullanıcı girişi yapılacak mı? (E/H)'", shape=parallelogram];
  decide_login [label="Kullanıcı giriş istiyor mu?", shape=diamond];
  login_loop_start [label="DÖNGÜ: maksimumDeneme > 0", shape=box];
  read_email [label="OKU: e-posta/kullanıcı adı", shape=parallelogram];
  read_pass [label="OKU: şifre", shape=parallelogram];
  auth_check [label="EĞER: DogrulaKullanici(email,şifre) ?", shape=diamond];
  login_success [label="İşlem: oturumAcik=true\nsepet ← KullanıcıSepeti yükle", shape=box];
  login_fail_decr [label="İşlem: maksimumDeneme--", shape=box];
  login_fail_msg [label="YAZ: 'Giriş başarısız veya kalan deneme mesajı'", shape=parallelogram];
  guest_continue [label="İşlem: Misafir sepeti oluştur", shape=box];
  login_block [label="YAZ: 'Giriş başarısız. Lütfen sonra tekrar deneyin.'\nDUR", shape=parallelogram];

  // 2. Ürün ekleme
  ask_add_product [label="DÖNGÜ Başlat: 'Ürün eklemek ister misiniz? (E/H)'", shape=box];
  decide_add_product [label="EĞER: ekleCevap = E ?", shape=diamond];
  read_product [label="OKU: urunID\nOKU: miktar", shape=parallelogram];
  stock_check [label="EĞER: stok ≥ miktar ?", shape=diamond];
  reserve_if_logged [label="EĞER: oturumAcik = true ?", shape=diamond];
  reserve_attempt [label="İşlem: RezerveEt(urunID,miktar,kullanici.id)", shape=box];
  add_to_cart_logged [label="İşlem: sepet.Ekle(urunID,miktar)\nYAZ: 'Ürün sepete eklendi.'", shape=box];
  add_to_cart_guest [label="İşlem: sepet.Ekle(session)\nYAZ: 'Ürün (misafir) sepete eklendi.'", shape=box];
  stock_insufficient_msg [label="YAZ: 'Stok yetersiz'", shape=parallelogram];

  // 3. Sepet görüntüle/güncelle
  show_cart [label="İşlem: GetirSepetDetay(sepet)\nYAZ: Sepet", shape=box];
  cart_update_loop [label="DÖNGÜ: Sepet güncelle işlemleri (D/S/V)", shape=box];
  decide_update_action [label="EĞER: (D/S/V) ?", shape=diamond];
  read_update [label="OKU: urunID\nOKU: yeniAdet", shape=parallelogram];
  stock_check_update [label="EĞER: stok ≥ yeniAdet ?", shape=diamond];
  update_qty [label="İşlem: sepet.GuncelleAdet(urunID,yeniAdet)\nYAZ:'Adet güncellendi.'", shape=box];
  remove_item [label="İşlem: sepet.Sil(urunID)\nYAZ:'Ürün silindi.'", shape=box];

  // 4. Kupon uygulama
  ask_coupon [label="OKU: 'Kupon kodu var mı? (E/H)'", shape=parallelogram];
  decide_coupon [label="EĞER: kuponVar = E ?", shape=diamond];
  read_coupon [label="OKU: kuponKodu", shape=parallelogram];
  check_coupon [label="EĞER: KontrolEtKupon(kuponKodu,kullanici,sepet) ?", shape=diamond];
  apply_coupon [label="İşlem: UygulaKupon(sepet,indirim)\nYAZ:'Kupon uygulandı.'", shape=box];
  coupon_invalid_msg [label="YAZ: 'Kupon geçersiz veya koşul sağlanmıyor.'", shape=parallelogram];

  // 5. Kargo hesaplama
  ask_address [label="OKU: 'Teslimat adresi girilsin mi? (E/H)'", shape=parallelogram];
  decide_address [label="EĞER: adresVar = E ?", shape=diamond];
  read_address [label="OKU: adres bilgileri", shape=parallelogram];
  calc_shipping_options [label="İşlem: HesaplaKargoSecenekleri(sepet,adres)\nYAZ: seçenekler", shape=box];
  read_shipping_choice [label="OKU: kargoSecimi\nİşlem: kargoUcreti = GetirKargoUcreti(...)", shape=parallelogram];

  // 6. Fiyat, vergi, toplam
  calc_prices [label="İşlem: araToplam = HesaplaAraToplam(sepet)\nvergi = HesaplaVergi(...)\ntoplamTutar hesapla", shape=box];
  show_summary [label="YAZ: AraToplam, İndirim, Vergi, Kargo, Toplam", shape=parallelogram];

  // 7. Ödeme
  ask_payment_method [label="OKU: 'Ödeme yöntemi seçiniz'", shape=parallelogram];
  payment_loop [label="DÖNGÜ: odemeDenemeSayisi < maksimumDeneme", shape=box];
  decide_payment_method [label="EĞER: odemeYontemi = KrediKartı/Havale/Kapıda/Dijital ?", shape=diamond];

  // payment branches
  read_card [label="OKU: Kart bilgileri\nİşlem: token = TokenizeKart(...)", shape=parallelogram];
  card_pay [label="İşlem: OdemeSaglayici.Ode(token,toplamTutar,idempotencyKey)", shape=box];
  bank_transfer_wait [label="İşlem: HavaleBekleVeOnayla(...)", shape=box];
  decide_cod_allowed [label="EĞER: KapidaIzinVar(adres) ?", shape=diamond];
  cod_success [label="İşlem: odemeBasarili=true, odemeId=KAPIDA-...", shape=box];
  digital_wallet [label="İşlem: DijitalCuzdan.Ode(...)", shape=box];
  payment_success [label="EĞER: odemeBasarili = true ?", shape=diamond];
  payment_fail_msg [label="YAZ: 'Ödeme başarısız. Kalan deneme...'", shape=parallelogram];
  ask_try_other [label="OKU: 'Farklı yöntem denemek ister misiniz? (E/H)'", shape=parallelogram];
  stop_on_payment_fail [label="YAZ: 'Ödeme işlemi başarısız. Sipariş tamamlanamadı.'\nDUR", shape=parallelogram];

  // 8. Sipariş oluşturma ve stok güncelleme (atomic)
  begin_tx [label="İşlem: BaşlatTransaction()", shape=box];
  reduce_stock_loop [label="DÖNGÜ: her bir ürün in sepet", shape=box];
  check_stock_before_reduce [label="EĞER: stok ≥ ürün.miktar ?", shape=diamond];
  reduce_stock [label="İşlem: AzaltStok(ürün.id,ürün.miktar)", shape=box];
  stock_reduce_fail [label="İşlem: başarılı=false\nYAZ:'Stok hatası'", shape=parallelogram];
  commit_tx [label="İşlem: CommitTransaction()\nİşlem: siparisId = OlusturSiparis(...)\nYAZ:'Sipariş oluşturuldu.'", shape=box];
  rollback_tx [label="İşlem: RollbackTransaction()\nEĞER odemeBasarili ise BaslatIade(odemeId)", shape=box];

  // 9. Bildirimler ve fatura
  notify [label="İşlem: GonderSiparisOnayi(email,siparisId)\nOlusturVeSaklaFatura(siparisId)", shape=box];

  // 10. İade kısa akışı
  refund [label="İşlem: İade talebi → onay, stok geri yatır, iade ödeme sağlayıcı", shape=box];

  // 11. Loglama
  logging [label="İşlem: Logla(kullanici, sepet, odemeId, siparisId)", shape=box];

  // --- Bağlantılar ---
  start -> u_init -> ask_login -> decide_login;
  decide_login -> login_loop_start [label="EVET"];
  decide_login -> guest_continue [label="HAYIR"];

  login_loop_start -> read_email -> read_pass -> auth_check;
  auth_check -> login_success [label="EVET"];
  auth_check -> login_fail_decr [label="HAYIR"];
  login_fail_decr -> login_fail_msg -> login_loop_start;
  login_fail_decr -> login_block [label="maksDeneme=0"];

  guest_continue -> ask_add_product;
  login_success -> ask_add_product;

  // Ürün ekleme akışı
  ask_add_product -> decide_add_product;
  decide_add_product -> read_product [label="EVET"];
  decide_add_product -> show_cart [label="HAYIR"];

  read_product -> stock_check;
  stock_check -> reserve_if_logged [label="EVET"];
  stock_check -> stock_insufficient_msg [label="HAYIR"] -> ask_add_product;

  reserve_if_logged -> reserve_attempt [label="EVET"];
  reserve_if_logged -> add_to_cart_guest [label="HAYIR"];
  reserve_attempt -> add_to_cart_logged [label="rezervasyon başarılı"];
  reserve_attempt -> stock_insufficient_msg [label="rezervasyon başarısız"];

  add_to_cart_logged -> ask_add_product;
  add_to_cart_guest -> ask_add_product;

  // Sepet işlemleri
  show_cart -> cart_update_loop;
  cart_update_loop -> decide_update_action;
  decide_update_action -> read_update [label="D"];
  decide_update_action -> remove_item [label="S"];
  decide_update_action -> ask_coupon [label="V"];

  read_update -> stock_check_update;
  stock_check_update -> update_qty [label="EVET"];
  stock_check_update -> stock_insufficient_msg [label="HAYIR"] -> cart_update_loop;
  update_qty -> cart_update_loop;
  remove_item -> cart_update_loop;

  // Kupon
  ask_coupon -> decide_coupon;
  decide_coupon -> read_coupon [label="EVET"];
  decide_coupon -> calc_shipping_options [label="HAYIR"];
  read_coupon -> check_coupon;
  check_coupon -> apply_coupon [label="EVET"];
  check_coupon -> coupon_invalid_msg [label="HAYIR"];
  apply_coupon -> calc_shipping_options;
  coupon_invalid_msg -> calc_shipping_options;

  // Kargo
  calc_shipping_options -> ask_address;
  ask_address -> decide_address;
  decide_address -> read_address [label="EVET"];
  decide_address -> stop_on_payment_fail [label="HAYIR"];
  read_address -> calc_shipping_options [label="adres alındı"] ;
  calc_shipping_options -> read_shipping_choice;

  read_shipping_choice -> calc_prices;

  // Fiyat ve özet
  calc_prices -> show_summary -> ask_payment_method;

  // Ödeme akışı
  ask_payment_method -> payment_loop;
  payment_loop -> decide_payment_method;

  decide_payment_method -> read_card [label="KrediKartı"];
  decide_payment_method -> bank_transfer_wait [label="Havale"];
  decide_payment_method -> decide_cod_allowed [label="Kapıda"];
  decide_payment_method -> digital_wallet [label="DijitalCuzdan"];

  read_card -> card_pay -> payment_success;
  bank_transfer_wait -> payment_success;
  digital_wallet -> payment_success;

  decide_cod_allowed -> cod_success [label="EVET"];
  decide_cod_allowed -> payment_fail_msg [label="HAYIR"];

  payment_success -> begin_tx [label="EVET"];
  payment_success -> payment_fail_msg [label="HAYIR"];

  payment_fail_msg -> ask_try_other;
  ask_try_other -> payment_loop [label="EVET"];
  ask_try_other -> stop_on_payment_fail [label="HAYIR"];

  // Sipariş oluşturma / stok düşme
  begin_tx -> reduce_stock_loop;
  reduce_stock_loop -> check_stock_before_reduce;
  check_stock_before_reduce -> reduce_stock [label="EVET"];
  check_stock_before_reduce -> stock_reduce_fail [label="HAYIR"];

  reduce_stock -> reduce_stock_loop [label="diğer ürünler"];
  reduce_stock_loop -> commit_tx [label="tüm ürünler işlendi"];
  stock_reduce_fail -> rollback_tx -> stop_on_payment_fail;

  commit_tx -> notify -> logging -> refund -> end;
}



syntax error in line 121 near '->' hatası veriyor graphizde düzeltir misin?


13s boyunca düşündüm

İyi yakaladın — hata genellikle eksik noktalı virgül, yanlış yerleştirilmiş köşeli parantez ya da bir kenar tanımının yanlış yerde olmasından kaynaklanır. Aşağıda verdiğin DOT’u temizleyip küçük syntax hatalarını düzelttim ve tek parça, çalıştırılabilir bir DOT çıktısı hazırladım. graphviz/dot ile çalıştırdığında artık hata vermemeli.

Düzeltilmiş ve doğrulanmış DOT kodu:

digraph E_Ticaret_Sepet_Odeme {
  rankdir=TB;
  labelloc="t";
  label="E-ticaret Sepet Yönetimi ve Ödeme Akışı (Pseudocode -> DOT)";

  node [fontname="Arial", fontsize=10];

  // Shapes: start/end=ellipse, io=parallelogram, proc=box, decision=diamond
  start [label="BAŞLA", shape=ellipse, fillcolor=lightgoldenrod];
  end [label="BİTİR", shape=ellipse, fillcolor=lightgoldenrod];

  // 1. Kullanıcı girişi
  u_init [label="Başlat: Değişkenleri tanımla\n(sepet boş, oturum=false,...)", shape=box];
  ask_login [label="OKU: 'Kullanıcı girişi yapılacak mı? (E/H)'", shape=parallelogram];
  decide_login [label="Kullanıcı giriş istiyor mu?", shape=diamond];
  login_loop_start [label="DÖNGÜ: maksimumDeneme > 0", shape=box];
  read_email [label="OKU: e-posta/kullanıcı adı", shape=parallelogram];
  read_pass [label="OKU: şifre", shape=parallelogram];
  auth_check [label="EĞER: DogrulaKullanici(email,şifre) ?", shape=diamond];
  login_success [label="İşlem: oturumAcik=true\nsepet ← KullanıcıSepeti yükle", shape=box];
  login_fail_decr [label="İşlem: maksimumDeneme--", shape=box];
  login_fail_msg [label="YAZ: 'Giriş başarısız veya kalan deneme mesajı'", shape=parallelogram];
  guest_continue [label="İşlem: Misafir sepeti oluştur", shape=box];
  login_block [label="YAZ: 'Giriş başarısız. Lütfen sonra tekrar deneyin.'\nDUR", shape=parallelogram];

  // 2. Ürün ekleme
  ask_add_product [label="DÖNGÜ Başlat: 'Ürün eklemek ister misiniz? (E/H)'", shape=box];
  decide_add_product [label="EĞER: ekleCevap = E ?", shape=diamond];
  read_product [label="OKU: urunID\nOKU: miktar", shape=parallelogram];
  stock_check [label="EĞER: stok ≥ miktar ?", shape=diamond];
  reserve_if_logged [label="EĞER: oturumAcik = true ?", shape=diamond];
  reserve_attempt [label="İşlem: RezerveEt(urunID,miktar,kullanici.id)", shape=box];
  add_to_cart_logged [label="İşlem: sepet.Ekle(urunID,miktar)\nYAZ: 'Ürün sepete eklendi.'", shape=box];
  add_to_cart_guest [label="İşlem: sepet.Ekle(session)\nYAZ: 'Ürün (misafir) sepete eklendi.'", shape=box];
  stock_insufficient_msg [label="YAZ: 'Stok yetersiz'", shape=parallelogram];

  // 3. Sepet görüntüle/güncelle
  show_cart [label="İşlem: GetirSepetDetay(sepet)\nYAZ: Sepet", shape=box];
  cart_update_loop [label="DÖNGÜ: Sepet güncelle işlemleri (D/S/V)", shape=box];
  decide_update_action [label="EĞER: (D/S/V) ?", shape=diamond];
  read_update [label="OKU: urunID\nOKU: yeniAdet", shape=parallelogram];
  stock_check_update [label="EĞER: stok ≥ yeniAdet ?", shape=diamond];
  update_qty [label="İşlem: sepet.GuncelleAdet(urunID,yeniAdet)\nYAZ:'Adet güncellendi.'", shape=box];
  remove_item [label="İşlem: sepet.Sil(urunID)\nYAZ:'Ürün silindi.'", shape=box];

  // 4. Kupon uygulama
  ask_coupon [label="OKU: 'Kupon kodu var mı? (E/H)'", shape=parallelogram];
  decide_coupon [label="EĞER: kuponVar = E ?", shape=diamond];
  read_coupon [label="OKU: kuponKodu", shape=parallelogram];
  check_coupon [label="EĞER: KontrolEtKupon(kuponKodu,kullanici,sepet) ?", shape=diamond];
  apply_coupon [label="İşlem: UygulaKupon(sepet,indirim)\nYAZ:'Kupon uygulandı.'", shape=box];
  coupon_invalid_msg [label="YAZ: 'Kupon geçersiz veya koşul sağlanmıyor.'", shape=parallelogram];

  // 5. Kargo hesaplama
  ask_address [label="OKU: 'Teslimat adresi girilsin mi? (E/H)'", shape=parallelogram];
  decide_address [label="EĞER: adresVar = E ?", shape=diamond];
  read_address [label="OKU: adres bilgileri", shape=parallelogram];
  calc_shipping_options [label="İşlem: HesaplaKargoSecenekleri(sepet,adres)\nYAZ: seçenekler", shape=box];
  read_shipping_choice [label="OKU: kargoSecimi\nİşlem: kargoUcreti = GetirKargoUcreti(...)", shape=parallelogram];

  // 6. Fiyat, vergi, toplam
  calc_prices [label="İşlem: araToplam = HesaplaAraToplam(sepet)\nvergi = HesaplaVergi(...)\ntoplamTutar hesapla", shape=box];
  show_summary [label="YAZ: AraToplam, İndirim, Vergi, Kargo, Toplam", shape=parallelogram];

  // 7. Ödeme
  ask_payment_method [label="OKU: 'Ödeme yöntemi seçiniz'", shape=parallelogram];
  payment_loop [label="DÖNGÜ: odemeDenemeSayisi < maksimumDeneme", shape=box];
  decide_payment_method [label="EĞER: odemeYontemi = KrediKartı/Havale/Kapıda/Dijital ?", shape=diamond];

  // payment branches
  read_card [label="OKU: Kart bilgileri\nİşlem: token = TokenizeKart(...)", shape=parallelogram];
  card_pay [label="İşlem: OdemeSaglayici.Ode(token,toplamTutar,idempotencyKey)", shape=box];
  bank_transfer_wait [label="İşlem: HavaleBekleVeOnayla(...)", shape=box];
  decide_cod_allowed [label="EĞER: KapidaIzinVar(adres) ?", shape=diamond];
  cod_success [label="İşlem: odemeBasarili=true\nİşlem: odemeId=KAPIDA-...", shape=box];
  digital_wallet [label="İşlem: DijitalCuzdan.Ode(...)", shape=box];
  payment_success [label="EĞER: odemeBasarili = true ?", shape=diamond];
  payment_fail_msg [label="YAZ: 'Ödeme başarısız. Kalan deneme...'", shape=parallelogram];
  ask_try_other [label="OKU: 'Farklı yöntem denemek ister misiniz? (E/H)'", shape=parallelogram];
  stop_on_payment_fail [label="YAZ: 'Ödeme işlemi başarısız. Sipariş tamamlanamadı.'\nDUR", shape=parallelogram];

  // 8. Sipariş oluşturma ve stok güncelleme (atomic)
  begin_tx [label="İşlem: BaşlatTransaction()", shape=box];
  reduce_stock_loop [label="DÖNGÜ: her bir ürün in sepet", shape=box];
  check_stock_before_reduce [label="EĞER: stok ≥ ürün.miktar ?", shape=diamond];
  reduce_stock [label="İşlem: AzaltStok(ürün.id,ürün.miktar)", shape=box];
  stock_reduce_fail [label="İşlem: başarılı=false\nYAZ:'Stok hatası'", shape=parallelogram];
  commit_tx [label="İşlem: CommitTransaction()\nİşlem: siparisId = OlusturSiparis(...)\nYAZ:'Sipariş oluşturuldu.'", shape=box];
  rollback_tx [label="İşlem: RollbackTransaction()\nEĞER odemeBasarili ise BaslatIade(odemeId)", shape=box];

  // 9. Bildirimler ve fatura
  notify [label="İşlem: GonderSiparisOnayi(email,siparisId)\nOlusturVeSaklaFatura(siparisId)", shape=box];

  // 10. İade kısa akışı
  refund [label="İşlem: İade talebi → onay, stok geri yatır, iade ödeme sağlayıcı", shape=box];

  // 11. Loglama
  logging [label="İşlem: Logla(kullanici, sepet, odemeId, siparisId)", shape=box];

  // --- Bağlantılar ---
  start -> u_init -> ask_login -> decide_login;
  decide_login -> login_loop_start [label="EVET"];
  decide_login -> guest_continue [label="HAYIR"];

  login_loop_start -> read_email -> read_pass -> auth_check;
  auth_check -> login_success [label="EVET"];
  auth_check -> login_fail_decr [label="HAYIR"];
  login_fail_decr -> login_fail_msg -> login_loop_start;
  login_fail_decr -> login_block [label="maksDeneme=0"];

  guest_continue -> ask_add_product;
  login_success -> ask_add_product;

  // Ürün ekleme akışı
  ask_add_product -> decide_add_product;
  decide_add_product -> read_product [label="EVET"];
  decide_add_product -> show_cart [label="HAYIR"];

  read_product -> stock_check;
  stock_check -> reserve_if_logged [label="EVET"];
  stock_check -> stock_insufficient_msg [label="HAYIR"];
  stock_insufficient_msg -> ask_add_product;

  reserve_if_logged -> reserve_attempt [label="EVET"];
  reserve_if_logged -> add_to_cart_guest [label="HAYIR"];
  reserve_attempt -> add_to_cart_logged [label="rezervasyon başarılı"];
  reserve_attempt -> stock_insufficient_msg [label="rezervasyon başarısız"];

  add_to_cart_logged -> ask_add_product;
  add_to_cart_guest -> ask_add_product;

  // Sepet işlemleri
  show_cart -> cart_update_loop;
  cart_update_loop -> decide_update_action;
  decide_update_action -> read_update [label="D"];
  decide_update_action -> remove_item [label="S"];
  decide_update_action -> ask_coupon [label="V"];

  read_update -> stock_check_update;
  stock_check_update -> update_qty [label="EVET"];
  stock_check_update -> stock_insufficient_msg [label="HAYIR"];
  stock_insufficient_msg -> cart_update_loop;
  update_qty -> cart_update_loop;
  remove_item -> cart_update_loop;

  // Kupon
  ask_coupon -> decide_coupon;
  decide_coupon -> read_coupon [label="EVET"];
  decide_coupon -> calc_shipping_options [label="HAYIR"];
  read_coupon -> check_coupon;
  check_coupon -> apply_coupon [label="EVET"];
  check_coupon -> coupon_invalid_msg [label="HAYIR"];
  apply_coupon -> calc_shipping_options;
  coupon_invalid_msg -> calc_shipping_options;

  // Kargo
  calc_shipping_options -> ask_address;
  ask_address -> decide_address;
  decide_address -> read_address [label="EVET"];
  decide_address -> stop_on_payment_fail [label="HAYIR"];
  read_address -> calc_shipping_options;
  calc_shipping_options -> read_shipping_choice;

  read_shipping_choice -> calc_prices;

  // Fiyat ve özet
  calc_prices -> show_summary -> ask_payment_method;

  // Ödeme akışı
  ask_payment_method -> payment_loop;
  payment_loop -> decide_payment_method;

  decide_payment_method -> read_card [label="KrediKartı"];
  decide_payment_method -> bank_transfer_wait [label="Havale"];
  decide_payment_method -> decide_cod_allowed [label="Kapıda"];
  decide_payment_method -> digital_wallet [label="DijitalCuzdan"];

  read_card -> card_pay -> payment_success;
  bank_transfer_wait -> payment_success;
  digital_wallet -> payment_success;

  decide_cod_allowed -> cod_success [label="EVET"];
  decide_cod_allowed -> payment_fail_msg [label="HAYIR"];

  payment_success -> begin_tx [label="EVET"];
  payment_success -> payment_fail_msg [label="HAYIR"];

  payment_fail_msg -> ask_try_other;
  ask_try_other -> payment_loop [label="EVET"];
  ask_try_other -> stop_on_payment_fail [label="HAYIR"];

  // Sipariş oluşturma / stok düşme
  begin_tx -> reduce_stock_loop;
  reduce_stock_loop -> check_stock_before_reduce;
  check_stock_before_reduce -> reduce_stock [label="EVET"];
  check_stock_before_reduce -> stock_reduce_fail [label="HAYIR"];

  reduce_stock -> reduce_stock_loop [label="diğer ürünler"];
  reduce_stock_loop -> commit_tx [label="tüm ürünler işlendi"];
  stock_reduce_fail -> rollback_tx -> stop_on_payment_fail;

  commit_tx -> notify -> logging -> refund -> end;
}


Ne düzelttim / neden çalışmalı:

Kenar (edge) tanımlarında eksik veya yanlış noktalı virgül/satır bağlantılarını düzelttim ve bazı kenar açıklamalarını (label) doğru konumlandırdım.

read_address -> calc_shipping_options [label="adres alındı"] ; gibi ara satırlarda noktalama/ayraç problemleri olabileceği için bu hattı sadeleştirdim (read_address -> calc_shipping_options;) ve akışı korudum.

Tüm düğüm (node) tanımlarıyla bağlantılar arasında tutarlı noktalı virgül kullanımı sağladım.


